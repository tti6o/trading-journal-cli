---
description: 
globs: database*.py
alwaysApply: false
---
# 数据库架构与数据管理规范

本规范旨在确保数据库结构的一致性、数据的完整性和数据访问的高效性。所有与数据库相关的设计和操作都必须遵循本指南。

## 1. 数据模型与表结构

-   **核心数据表:** 项目的核心数据模型定义在 [ARCHITECTURE.md](mdc:project_docs/ARCHITECTURE.md) 中。目前的核心表是 `trades`。
-   **字段命名:**
    -   使用 `snake_case`，例如 `utc_time`, `fee_currency`。
    -   命名应清晰、无歧义，避免使用缩写，除非是广泛接受的（如 `pnl`）。
-   **数据类型:** 必须为每个字段选择最合适、最高效的数据类型。例如，价格和数量使用 `REAL`，标识符使用 `INTEGER` 或 `TEXT`。
-   **约束:**
    -   每个表都必须有主键 (`PRIMARY KEY`)。
    -   根据业务规则，合理使用 `NOT NULL`, `UNIQUE`, `DEFAULT` 等约束来保证数据质量。
-   **索引:**
    -   必须在所有外键和经常用于查询条件（`WHERE` 子句）、排序（`ORDER BY`）或分组（`GROUP BY`）的列上创建索引，以提高查询性能。
    -   `trades` 表的 `utc_time` 和 `symbol` 字段应建立索引。

## 2. 数据库迁移

-   **Schema 变更:**
    -   **禁止直接手动修改生产数据库的表结构。**
    -   所有对数据库表结构的变更（例如，添加列、修改类型、新增表）都必须通过迁移脚本来完成。
    -   项目初期可手动管理，但当复杂度增加时，应引入 `Alembic` 等数据库迁移工具。
-   **迁移脚本:**
    -   每个迁移脚本都应是可独立运行的，并包含升级（apply）和降级（revert）两种操作。
    -   脚本文件名应包含版本号和描述性名称，例如 `001_add_pnl_to_trades.py`。

## 3. 数据访问

-   **数据访问层 (DAL):**
    -   所有数据库操作（增删改查）**必须**封装在数据访问层 (`database_setup.py`) 的函数中。
    -   业务逻辑层代码**严禁**直接拼接或执行 SQL 语句。
-   **查询优化:**
    -   避免使用 `SELECT *`，应明确指定需要查询的列。
    -   对于复杂查询，应使用 `EXPLAIN QUERY PLAN` 来分析其性能，并进行优化。
-   **事务管理:**
    -   对于一系列需要原子性（要么全部成功，要么全部失败）的操作，必须使用数据库事务来保证数据一致性。例如，在一次导入操作中，应将所有 `INSERT` 语句包裹在同一个事务中。
-   **连接管理:**
    -   确保数据库连接在使用后能够被正确关闭，以避免连接泄露。推荐使用 `with` 语句来管理连接的生命周期。

## 4. 数据安全与备份

-   **防止 SQL 注入:**
    -   在执行 SQL 查询时，**必须**使用参数化查询（`?` 占位符），严禁使用字符串拼接或格式化来传递用户输入的值。
-   **数据备份:**
    -   应制定定期的数据库备份策略。对于 `SQLite`，可以直接备份 `.db` 文件。
    -   备份文件应存储在安全、独立的位置。
