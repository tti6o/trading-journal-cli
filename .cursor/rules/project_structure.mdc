---
description: 项目结构与架构指南
globs: 
alwaysApply: false
---
# 项目结构与架构指南

本指南旨在为所有开发者提供一个清晰、一致的项目结构和架构遵循标准。所有开发活动都应严格遵守本文档中定义的原则和模型。

## 1. 核心设计哲学

项目遵循以下核心设计哲学，以确保代码的质量和可维护性：

-   **简单性 (Simplicity):** 遵循KISS原则，优先选择简单直接的解决方案，避免不必要的复杂性。
-   **模块化 (Modularity):** 各模块功能独立，边界清晰，以降低耦合度。
-   **数据中心化 (Data-Centric):** 所有功能围绕核心数据模型展开，以数据库作为单一事实来源。
-   **无状态 (Stateless):** 核心业务逻辑应设计为无状态，同样的输入总是产生同样的输出。

更详细的设计理念，请参考项目的架构设计文档：[ARCHITECTURE.md](mdc:project_docs/ARCHITECTURE.md)。

## 2. 架构分层

项目采用严格的分层架构，每一层都有明确的职责。**严禁跨层调用**（例如，接口层直接调用数据访问层）。

-   **命令行接口层 (`main.py`):**
    -   **职责:** 解析用户输入、调用业务逻辑、格式化输出。
    -   **禁止:** 包含任何业务逻辑或直接操作数据库。

-   **业务逻辑层 (`journal_core.py`):**
    -   **职责:** 实现核心业务功能，是应用的大脑。
    -   **允许:** 调用数据访问层和工具层。

-   **数据处理/工具层 (`utilities.py`):**
    -   **职责:** 提供可重用的、与业务无关的工具函数。
    -   **禁止:** 依赖任何业务逻辑层的具体实现。

-   **数据访问层 (`database_setup.py`):**
    -   **职责:** 封装所有数据库的CRUD操作。
    -   **禁止:** 包含业务逻辑。所有SQL语句都应在此层内。

## 3. 核心工作流程

所有的新功能开发都必须遵循已定义的核心工作流程，例如数据导入和报告生成。

在添加或修改工作流程时，必须首先更新相关的时序图，并确保代码实现与图示一致。详细流程图请参见 [ARCHITECTURE.md](mdc:project_docs/ARCHITECTURE.md)。

## 4. 代码位置规范

-   **新功能:** 根据其所属的逻辑层次，将代码添加到对应的文件中。
-   **新工具函数:** 如果一个函数是通用的，并且可能被多个业务逻辑使用，应将其放入 `utilities.py`。
-   **新数据库操作:** 任何新的数据表或对现有表的增删改查，都必须在 `database_setup.py` 中以函数形式提供。

## 5. 文档更新规范

**⚠️ 重要规则：修改完成后必须完善相应文档！**

-   **功能变更必须更新文档**: 每当添加新功能、修改现有功能或添加新的命令行选项时，必须同步更新相关文档：
    -   `README.md` - 更新命令概览表格、用法示例
    -   `USAGE_GUIDE.md` - 详细的命令用法说明和参数选项
    -   CLI帮助信息 - 确保 `--help` 输出准确反映所有可用选项
    
-   **文档一致性检查**: 在完成开发后，必须验证：
    -   CLI `--help` 信息与实际功能一致
    -   `README.md` 中的示例可以正常运行
    -   `USAGE_GUIDE.md` 包含所有命令选项的详细说明
    
-   **示例更新**: 当功能变更时，更新文档中的：
    -   命令行示例
    -   输出样本
    -   参数说明

## 6. 测试脚本组织规范

**测试和验证脚本必须放置在专门的文件夹中，不得与核心代码混合！**

-   **`scripts/` 目录**: 存放演示脚本、验证脚本等辅助工具
    -   `demo_all_features.py` - 功能演示脚本
    -   `verify_*.py` - 特定功能验证脚本
    -   其他演示性质的脚本

-   **`tests/` 目录**: 存放正式的单元测试和集成测试
    -   单元测试文件：`test_*.py`
    -   测试数据文件：`fixtures/`
    -   测试配置文件

-   **文件组织原则**:
    -   核心代码目录保持清洁，只包含核心功能文件
    -   测试相关文件集中管理，便于维护
    -   脚本按功能分类，命名清晰明确
