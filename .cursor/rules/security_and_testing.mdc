---
description: 安全规范与测试标准
globs: 
alwaysApply: false
---
# 安全规范与测试标准

本文件定义了项目的安全编码准则和测试策略，旨在确保应用的健壮性、可靠性和安全性。

## 1. 安全规范

### 1.1 输入验证

-   **信任边界:** 任何来自外部的输入都应被视为不可信的，包括命令行参数、配置文件以及待导入的数据文件（如Excel）。
-   **严格验证:**
    -   必须对所有外部输入进行严格的格式、类型和范围验证。例如，确保日期是有效的日期格式，确保数字在合理范围内。
    -   使用 `try-except` 块来处理可能因无效输入导致的数据转换失败（如 `ValueError`）。
-   **路径处理:** 在处理文件路径时，要警惕路径遍历攻击（Path Traversal）。虽然在CLI工具中风险较低，但仍应避免将用户输入直接拼接到文件路径中。推荐使用 `os.path` 或 `pathlib` 进行安全的路径操作。

### 1.2 数据安全

-   **SQL 注入:** 严格遵守数据库规范，**必须**使用参数化查询来与数据库交互，杜绝任何SQL注入风险。
-   **敏感数据:**
    -   代码中**严禁**硬编码任何敏感信息（如API密钥、密码、私钥等）。
    -   所有敏感信息都应通过环境变量或安全的配置文件（例如，使用 `.env` 文件，并将其加入 `.gitignore`）来管理。
-   **依赖管理:**
    -   定期审查项目的第三方依赖库（`requirements.txt`），检查是否存在已知的安全漏洞。可以使用 `pip-audit` 或 `safety` 等工具进行自动化扫描。
    -   及时更新存在安全风险的依赖库。

### 1.3 输出处理

-   **错误信息:**
    -   在向用户展示错误信息时，避免泄露过多的内部细节，如文件系统路径、堆栈跟踪（Stack Trace）或数据库错误详情。
    -   应向用户提供清晰、有帮助的错误提示，并将详细的技术错误记录到日志文件中供开发者排查。

## 2. 测试标准

### 2.1 测试类型

项目应至少包含以下类型的测试：

-   **单元测试 (Unit Tests):**
    -   **目标:** 针对最小的可测试单元（通常是单个函数或方法）进行测试。
    -   **位置:** 测试代码应位于 `tests/` 目录下，并与源代码结构保持一致。例如，对 `utilities.py` 的测试应放在 `tests/test_utilities.py` 中。
    -   **要求:** 单元测试应快速、独立，不应依赖于外部系统（如数据库、网络）。对于需要与数据库交互的函数，应使用模拟（Mock）对象来替代真实的数据库连接。
-   **集成测试 (Integration Tests):**
    -   **目标:** 测试多个模块协同工作的正确性。例如，测试从命令行输入到业务逻辑处理，再到数据库读写的完整流程。
    -   **要求:** 集成测试可以与真实的数据库（一个专用的测试数据库）进行交互，以验证数据操作的正确性。

### 2.2 测试框架与实践

-   **框架:** 项目使用 `pytest` 作为主要的测试框架。
-   **代码覆盖率:**
    -   力争核心业务逻辑的单元测试覆盖率达到 90% 以上。
    -   可以使用 `pytest-cov` 插件来生成覆盖率报告。
-   **持续集成 (CI):**
    -   推荐配置 CI/CD 工作流（如 GitHub Actions），在每次代码提交或合并请求时自动运行所有测试。
    -   只有当所有测试都通过时，代码才允许被合并到主分支。
-   **测试编写:**
    -   测试用例的命名应清晰地描述其测试的场景，例如 `test_calculate_pnl_with_buy_and_sell()`。
    -   每个测试用例应遵循 "Arrange-Act-Assert" (AAA) 模式。

### 2.3 测试文件组织规范

**测试相关文件必须按类型严格分类，保持项目结构清洁！**

#### 2.3.1 目录结构

-   **`tests/` 目录** - 正式测试代码
    -   `test_*.py` - 单元测试文件，与源代码文件一一对应
    -   `integration/` - 集成测试子目录
    -   `fixtures/` - 测试数据和固定装置
    -   `conftest.py` - pytest配置和共享fixture

-   **`scripts/` 目录** - 演示和验证脚本
    -   `test_*.py` - 功能验证脚本（非正式测试）
    -   `demo_*.py` - 功能演示脚本
    -   `verify_*.py` - 特定功能验证脚本

#### 2.3.2 文件命名规范

-   **单元测试**: `test_<模块名>.py`，例如 `test_utilities.py`
-   **集成测试**: `test_integration_<功能名>.py`
-   **验证脚本**: `verify_<功能名>.py`
-   **演示脚本**: `demo_<功能描述>.py`

#### 2.3.3 禁止行为

-   **禁止**将测试脚本与核心功能代码混放在根目录
-   **禁止**在核心代码文件中包含测试代码
-   **禁止**使用不规范的文件命名方式

#### 2.3.4 脚本维护要求

-   每当添加新功能时，必须同步更新相关的演示和验证脚本
-   所有脚本必须包含清晰的功能说明和使用方法
-   测试脚本的输出应该便于理解和问题诊断
